{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"1ba9720c-1c9c-493e-874e-36560183e807","_cell_guid":"d0393b89-ac80-402c-9a74-c0392fafaced","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"_uuid":"44e1ebc0-d636-4fc2-9f1b-2ba3cca89134","_cell_guid":"52042864-cdff-4507-9902-caeaf60da4bb","collapsed":false,"execution":{"iopub.status.busy":"2024-04-19T20:16:44.945474Z","iopub.execute_input":"2024-04-19T20:16:44.946586Z","iopub.status.idle":"2024-04-19T20:16:44.951928Z","shell.execute_reply.started":"2024-04-19T20:16:44.946534Z","shell.execute_reply":"2024-04-19T20:16:44.950751Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{"_uuid":"e1980f3f-53b4-46c2-af3a-d388e0f7dee2","_cell_guid":"78df7032-19b9-44a7-8360-b153f1d2128d","trusted":true}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Definir los nodos y conexiones del diagrama\nnodes = {\n    'A': 'Planeación del estudio',\n    'B': 'Autorización del estudio',\n    'C': 'Recopilación de la información',\n    'D': 'Análisis e interpretación de datos',\n    'E': 'Elaboración y planteamiento de la propuesta',\n    'F': 'Implementación',\n    'G': 'Evaluación periódica'\n}\n\nedges = {\n    'A': ['B'],\n    'B': ['C'],\n    'C': ['D'],\n    'D': ['E'],\n    'E': ['F'],\n    'F': ['G'],\n    'G': ['C']\n}\n\n# Dibujar el diagrama\nplt.figure(figsize=(10, 6))\nfor node, desc in nodes.items():\n    plt.text(node, 0, desc, ha='center', va='center', bbox=dict(facecolor='white', alpha=0.5))\n    plt.plot([node], [0], 'o', markersize=20, markeredgecolor='k', markerfacecolor='w')\n\nfor start_node, end_nodes in edges.items():\n    for end_node in end_nodes:\n        plt.arrow(start_node, 0, end_node-start_node, 0, head_width=0.1, head_length=0.1, fc='k', ec='k')\n\nplt.xlim(-1, len(nodes))\nplt.ylim(-1, 1)\nplt.axis('off')\nplt.show()","metadata":{"_uuid":"7ae28349-ae3e-4a3a-ab58-32a4fa291bd0","_cell_guid":"5ce62b71-da8a-4e53-9689-ced17c41e565","collapsed":false,"execution":{"iopub.status.busy":"2024-04-19T20:17:53.626774Z","iopub.execute_input":"2024-04-19T20:17:53.627513Z","iopub.status.idle":"2024-04-19T20:17:54.275888Z","shell.execute_reply.started":"2024-04-19T20:17:53.627474Z","shell.execute_reply":"2024-04-19T20:17:54.273965Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Definir los nodos y conexiones del diagrama\nnodes = {\n    'A': 'Planeación del estudio',\n    'B': 'Autorización del estudio',\n    'C': 'Recopilación de la información',\n    'D': 'Análisis e interpretación de datos',\n    'E': 'Elaboración y planteamiento de la propuesta',\n    'F': 'Implementación',\n    'G': 'Evaluación periódica'\n}\n\nedges = {\n    'A': ['B'],\n    'B': ['C'],\n    'C': ['D'],\n    'D': ['E'],\n    'E': ['F'],\n    'F': ['G'],\n    'G': ['C']\n}\n\n# Asignar posiciones numéricas a los nodos\nnode_positions = {node: i for i, node in enumerate(nodes.keys())}\n\n# Dibujar el diagrama\nplt.figure(figsize=(12,6))\nfor node, desc in nodes.items():\n    plt.text(node_positions[node], 0, desc, ha='center', va='center', bbox=dict(facecolor='white', alpha=0.5))\n    plt.plot([node_positions[node]], [0], 'o', markersize=20, markeredgecolor='k', markerfacecolor='w')\n\nfor start_node, end_nodes in edges.items():\n    for end_node in end_nodes:\n        plt.arrow(node_positions[start_node], 0, node_positions[end_node] - node_positions[start_node], 0, head_width=0.1, head_length=0.1, fc='k', ec='k')\n\nplt.xlim(0, len(nodes)+1)\nplt.ylim(-2, 2)\nplt.axis('off')\nplt.show()","metadata":{"_uuid":"ba5e5c81-a74f-4ca0-bc18-1a73c9a9716f","_cell_guid":"43d1910f-95f3-4b85-bb49-2f261496d2a3","collapsed":false,"execution":{"iopub.status.busy":"2024-04-19T21:41:06.739798Z","iopub.execute_input":"2024-04-19T21:41:06.740337Z","iopub.status.idle":"2024-04-19T21:41:06.927250Z","shell.execute_reply.started":"2024-04-19T21:41:06.740296Z","shell.execute_reply":"2024-04-19T21:41:06.925779Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Definir los nodos y conexiones del diagrama\nnodes = {\n    'A': 'Recepción de facturas de proveedores',\n    'B': 'Envío de facturas de proveedores por email o físicamente',\n    'C': 'Revisión y aceptación de facturas y de la remesa',\n    'D': 'NO',\n    'E': 'La factura se paga por transferencia',\n    'F': 'NO',\n    'G': 'Elaboración de una relación de pagos a realizar en una carta de pago',\n    'H': 'Revisión de la carta de pago y aprobación de importes y proveedores',\n    'I': 'Emisión de la carta de pago',\n    'J': 'Seguimiento y control de pagos',\n    'K': 'Envío de ficheros al banco para realizar la transferencia',\n    'L': 'Archivo de facturas'\n}\n\nedges = {\n    'A': ['B'],\n    'B': ['C'],\n    'C': ['D', 'E'],\n    'D': ['A'],\n    'E': ['F'],\n    'F': ['G'],\n    'G': ['H'],\n    'H': ['I'],\n    'I': ['J'],\n    'J': ['K'],\n    'K': ['L'],\n    'L': ['A']\n}\n\n# Asignar posiciones numéricas a los nodos\nnode_positions = {node: i for i, node in enumerate(nodes.keys())}\n\n# Definir el tamaño del diagrama\nfig, ax = plt.subplots(figsize=(4, 2))\n\n# Dibujar los nodos\nfor node, desc in nodes.items():\n    x = node_positions[node]\n    y = 0\n    ax.text(x, y, desc, ha='center', va='center', fontsize=10, bbox=dict(facecolor='white', alpha=0.7))\n    ax.plot(x, y, 'o', markersize=20, markeredgecolor='k', markerfacecolor='w')\n\n# Dibujar las conexiones\nfor start_node, end_nodes in edges.items():\n    x_start = node_positions[start_node]\n    y_start = 0\n    for end_node in end_nodes:\n        x_end = node_positions[end_node]\n        y_end = 0\n        ax.arrow(\n            x_start, y_start, x_end - x_start, y_end - y_start,\n            head_width=0.2, head_length=0.4, fc='k', ec='k'\n        )\n\n# Ajustar los límites del diagrama\nax.set_xlim(-1, len(nodes))\nax.set_ylim(-1, 1)\n\n# Eliminar los ejes del diagrama\nax.axis('off')\n\n# Mostrar el diagrama\nplt.show()","metadata":{"_uuid":"1fc76856-23e0-44ca-a671-2b8ce3d76822","_cell_guid":"d11a69ef-cf0c-4160-bdbe-53af96069329","collapsed":false,"execution":{"iopub.status.busy":"2024-04-19T20:36:00.238265Z","iopub.execute_input":"2024-04-19T20:36:00.239593Z","iopub.status.idle":"2024-04-19T20:36:00.468630Z","shell.execute_reply.started":"2024-04-19T20:36:00.239545Z","shell.execute_reply":"2024-04-19T20:36:00.466857Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Definir los nodos y conexiones del diagrama\nnodes = {\n    'A': 'Recepción de facturas de proveedores',\n    'B': 'Envío de facturas de proveedores por email o físicamente',\n    'C': 'Revisión y aceptación de facturas y de la remesa',\n    'D': 'NO',\n    'E': 'La factura se paga por transferencia',\n    'F': 'NO',\n    'G': 'Elaboración de una relación de pagos a realizar en una carta de pago',\n    'H': 'Revisión de la carta de pago y aprobación de importes y proveedores',\n    'I': 'Emisión de la carta de pago',\n    'J': 'Seguimiento y control de pagos',\n    'K': 'Envío de ficheros al banco para realizar la transferencia',\n    'L': 'Archivo de facturas'\n}\n\nedges = {\n    'A': ['B'],\n    'B': ['C'],\n    'C': ['D', 'E'],\n    'D': ['A'],\n    'E': ['F'],\n    'F': ['G'],\n    'G': ['H'],\n    'H': ['I'],\n    'I': ['J'],\n    'J': ['K'],\n    'K': ['L'],\n    'L': ['A']\n}\n\n# Asignar posiciones numéricas a los nodos\nnode_positions = {node: i for i, node in enumerate(nodes.keys())}\n\n# Definir el tamaño del diagrama\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Dibujar los nodos\nfor node, desc in nodes.items():\n    x = node_positions[node]\n    y = 0\n    ax.text(x, y, desc, ha='center', va='center', fontsize=10, bbox=dict(facecolor='white', alpha=0.7))\n    ax.plot(x, y, 'o', markersize=20, markeredgecolor='k', markerfacecolor='w')\n\n# Dibujar las conexiones\nfor start_node, end_nodes in edges.items():\n    x_start = node_positions[start_node]\n    y_start = 0\n    for end_node in end_nodes:\n        x_end = node_positions[end_node]\n        y_end = 0\n        ax.arrow(\n            x_start, y_start, x_end - x_start","metadata":{"_uuid":"0a6dab6b-b25c-46a5-a309-4ec3aa0c9f1d","_cell_guid":"c654b59b-8c92-44e9-8d64-125ed1a50c63","collapsed":false,"execution":{"iopub.status.busy":"2024-04-19T20:32:52.847636Z","iopub.execute_input":"2024-04-19T20:32:52.848170Z","iopub.status.idle":"2024-04-19T20:32:52.860205Z","shell.execute_reply.started":"2024-04-19T20:32:52.848130Z","shell.execute_reply":"2024-04-19T20:32:52.858965Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Definir los nodos y conexiones del diagrama\nnodes = {\n    'A': 'Recepción de facturas de proveedores',\n    'B': 'Envío de facturas de proveedores por email o físicamente',\n    'C': 'Revisión y aceptación de facturas y de la remesa',\n    'D': 'NO',\n    'E': 'La factura se paga por transferencia',\n    'F': 'NO',\n    'G': 'Elaboración de una relación de pagos a realizar en una carta de pago',\n    'H': 'Revisión de la carta de pago y aprobación de importes y proveedores',\n    'I': 'Emisión de la carta de pago',\n    'J': 'Seguimiento y control de pagos',\n    'K': 'Envío de ficheros al banco para realizar la transferencia',\n    'L': 'Archivo de facturas'\n}\n\nedges = {\n    'A': ['B'],\n    'B': ['C'],\n    'C': ['D', 'E'],\n    'D': ['A'],\n    'E': ['F'],\n    'F': ['G'],\n    'G': ['H'],\n    'H': ['I'],\n    'I': ['J'],\n    'J': ['K'],\n    'K': ['L'],\n    'L': ['A']\n}\n\n# Asignar posiciones numéricas a los nodos\nnode_positions = {node: i for i, node in enumerate(nodes.keys())}\n\n# Definir el tamaño del diagrama\nfig, ax = plt.subplots(figsize=(8, 4))\n\n# Dibujar los nodos\nfor node, desc in nodes.items():\n    x = node_positions[node]\n    y = 0\n    ax.text(x, y, desc, ha='center', va='center', fontsize=10, bbox=dict(facecolor='white', alpha=0.7))\n    ax.plot(x, y, 'o', markersize=20, markeredgecolor='k', markerfacecolor='w')\n\n# Dibujar las conexiones\nfor start_node, end_nodes in edges.items():\n    x_start = node_positions[start_node]\n    y_start = 0\n    for end_node in end_nodes:\n        x_end = node_positions[end_node]\n        y_end = 0\n        ax.arrow(\n            x_start, y_start, x_end - x_start, y_end, \n            head_width=0.05, head_length=0.1, fc='k', ec='k', length_includes_head=True\n        )\n\n# Establecer límites y ocultar ejes\nax.set_xlim(-1, len(nodes))\nax.set_ylim(-1, 1)\nax.axis('off')\n\nplt.show()","metadata":{"_uuid":"a4f060a0-585f-4ade-aac7-c20bb06b7524","_cell_guid":"32bfcac6-307c-435c-a1f9-c9e32482fdf0","collapsed":false,"execution":{"iopub.status.busy":"2024-04-19T20:34:58.451223Z","iopub.execute_input":"2024-04-19T20:34:58.452518Z","iopub.status.idle":"2024-04-19T20:34:58.757136Z","shell.execute_reply.started":"2024-04-19T20:34:58.452455Z","shell.execute_reply":"2024-04-19T20:34:58.755799Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import graphviz as gv\n\n# Definir los nodos\ng = gv.Digraph()\n\nproveedor = g.node(\"Proveedor\")\nadministracion = g.node(\"Administración\")\ngerencia = g.node(\"Gerencia\")\ncontabilidad = g.node(\"Contabilidad\")\n\n# Definir los bordes\ng.edge(proveedor, administracion, label=\"Envío de facturas de Proveedores por email o físicamente\")\ng.edge(administracion, administracion, label=\"Revisión y aceptación de facturas y de la remesa\")\ng.edge(administracion, administracion, label=\"NO\")\ng.edge(administracion, administracion, label=\"LA FACTURA SE PAGA POR TRANSFERENCIA\")\ng.edge(administracion, administracion, label=\"SI\")\ng.edge(administracion, contabilidad, label=\"Elaboración de una relación de pagos a realizar en una carta de Pago\")\ng.edge(contabilidad, contabilidad, label=\"Revisión de la carta de pago y aprobación importes y proveedores\")\ng.edge(contabilidad, administracion, label=\"Emisión de la carta de Pago\")\ng.edge(administracion, administracion, label=\"Seguimiento y control de pagos\")\ng.edge(administracion, administracion, label=\"Archivo de Facturas\")\ng.edge(administracion, contabilidad, label=\"Envío de ficheros al banco para realizar transferencia\")\n\n# Personalizar el diagrama\ng.attr(mode=\"rankdir\", rankdir=\"TD\")\ng.node(shape=\"box\")\ng.edge(fontsize=12)\n\n# Mostrar el diagrama\nprint(g.render(format=\"png\"))","metadata":{"_uuid":"6f27a84f-adaf-4be4-8786-fb7fa1734717","_cell_guid":"11a6be0c-f329-4c6b-88ed-b745b86bb4bc","collapsed":false,"execution":{"iopub.status.busy":"2024-04-19T21:21:15.739655Z","iopub.execute_input":"2024-04-19T21:21:15.740174Z","iopub.status.idle":"2024-04-19T21:21:15.916390Z","shell.execute_reply.started":"2024-04-19T21:21:15.740138Z","shell.execute_reply":"2024-04-19T21:21:15.914471Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import graphviz as gv\n\n# Define the nodes (order matters here)\nproveedor = g.node(\"Proveedor\")\nadministracion = g.node(\"Administración\")\ngerencia = g.node(\"Gerencia\")\ncontabilidad = g.node(\"Contabilidad\")\n\n# Define the edges\ng.edge(proveedor, administracion, label=\"Envío de facturas de Proveedores por email o físicamente\")\ng.edge(administracion, administracion, label=\"Revisión y aceptación de facturas y de la remesa\")\ng.edge(administracion, administracion, label=\"NO\")\ng.edge(administracion, administracion, label=\"SI\")\ng.edge(administracion, contabilidad, label=\"Elaboración de una relación de pagos a realizar en una carta de Pago\")\n# ... (rest of your edge definitions)\n\n# Personalize the diagram (optional)\ng.attr(mode=\"rankdir\", rankdir=\"TD\")\ng.node(shape=\"box\")\ng.edge[fontsize=12]\n\n# Show the diagram\nprint(g.render(format=\"png\"))","metadata":{"_uuid":"2f9ed38a-9005-4c1b-81f6-4cea6687afc1","_cell_guid":"2db7ecde-f8fa-487d-9039-49955b3d5b5d","collapsed":false,"execution":{"iopub.status.busy":"2024-04-19T21:24:44.446860Z","iopub.execute_input":"2024-04-19T21:24:44.447443Z","iopub.status.idle":"2024-04-19T21:24:44.460986Z","shell.execute_reply.started":"2024-04-19T21:24:44.447408Z","shell.execute_reply":"2024-04-19T21:24:44.459296Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}